from mimesis.builtins.base import BaseSpecProvider
from mimesis.utils import pull, check_gender


class RussiaSpecProvider(BaseSpecProvider):
    """Specific data for Russian language"""

    def __init__(self):
        super().__init__()
        self._data = pull('builtin.json', 'ru')

    class Meta:
        name = 'russia_provider'

    def generate_sentence(self) -> str:
        """Generate sentence from the parts.

        :return: Sentence.
        """
        sentences = self._data['sentence']
        sentence = [
            self.random.choice(sentences[k]) for k
            in ('head', 'p1', 'p2', 'tail')
        ]
        return '{0} {1} {2} {3}'.format(*sentence)

    def patronymic(self, gender=None):
        """Generate random patronymic name.

        :param gender: Gender of person.
        :return: Patronymic name.
        :Example:
            Алексеевна.
        """
        gender = check_gender(gender)
        patronymics = self._data['patronymic'][gender]
        return self.random.choice(patronymics)

    def passport_series(self, year=None):
        """Generate random series of passport.

        :param year: Year of manufacture.
        :return: Series.
        :Example:
            02 15.
        """
        year = self.random.randint(10, 16) if not \
            year else year

        region = self.random.randint(1, 99)
        return '{:02d} {}'.format(region, year)

    def passport_number(self):
        """Generate random passport number.

        :return: Number.
        :Example:
            560430
        """
        return self.random.randint(
            100000, 999999)

    def series_and_number(self):
        """Generate a random passport number and series.

        :return: Series and number.
        :Example:
            57 16 805199.
        """
        return '%s %s' % (
            self.passport_series(),
            self.passport_number(),
        )

    def snils(self):
        """Generate Individual insurance account number (SNILS).
        This method does not generate SNILS using algorithm and
        it's mean that SNILS generated by this method can be invalid.

        :return: SNILS.
        :Example:
            451-952-540-41.
        """
        mask = '###-###-###-##'
        snils = self.code(mask=mask)
        return snils
